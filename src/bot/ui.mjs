import { Markup } from 'telegraf'

/**
 * Send welcome message for new user
 * @param {Context} ctx
 * @param {string} firstName
 * @returns {Promise<TgMsg>}
 */
export async function sendWelcome(ctx, firstName) {
  return await ctx.reply(
    `–ü—Ä–∏–≤–µ—Ç, ${firstName || '–¥—Ä—É–≥'}! üëã\n\n` +
    '–Ø –±–æ—Ç –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Ü–µ–Ω –Ω–∞ —Ç–æ–≤–∞—Ä—ã Wildberries.\n' +
    '–ß—Ç–æ —è —É–º–µ—é:\n' +
    '‚Äî –ü–æ–∫–∞–∑—ã–≤–∞—Ç—å –∫–∞—Ä—Ç–æ—á–∫—É —Ç–æ–≤–∞—Ä–∞ –ø–æ –∞—Ä—Ç–∏–∫—É–ª—É\n' +
    '‚Äî –ü–æ–¥–ø–∏—Å—ã–≤–∞—Ç—å —Ç–µ–±—è –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ü–µ–Ω—ã\n' +
    '‚Äî –£–≤–µ–¥–æ–º–ª—è—Ç—å, –∫–æ–≥–¥–∞ —Ü–µ–Ω–∞ –∏–∑–º–µ–Ω–∏–ª–∞—Å—å üìâüìà'
  )
}

/**
 * Send message for returning user
 * @param {Context} ctx
 * @param {string} firstName
 * @returns {Promise<TgMsg>}
 */
export async function sendWelcomeBack(ctx, firstName) {
  return await ctx.reply(`–° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º, ${firstName || '–¥—Ä—É–≥'}! üëã`)
}

/**
 * @param {Context} ctx
 * @param {boolean} hasSubscriptions
 * @returns {Promise<TgMsg>}
 */
export async function sendMainMenu(ctx, hasSubscriptions) {
  const buttons = [
    [{ text: 'üìã –ú–æ–∏ –ø–æ–¥–ø–∏—Å–∫–∏', callback_data: 'subscriptions' }],
    [{ text: '‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä', callback_data: 'addProduct' }]
  ]

  if (hasSubscriptions) {
    buttons.push([{ text: '‚ùå –û—Ç–ø–∏—Å–∞—Ç—å—Å—è –æ—Ç –≤—Å–µ—Ö', callback_data: 'unsubAll' }])
  }

  return await ctx.reply('–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:', Markup.inlineKeyboard(buttons))
}

/**
 * @param {Context} ctx
 * @returns {Promise<TgMsg>}
 */
export async function sendAddProductHint(ctx) {
  return await ctx.reply('–ü—Ä–∏—à–ª–∏ –∞—Ä—Ç–∏–∫—É–ª –∏–ª–∏ —Å—Å—ã–ª–∫—É –Ω–∞ —Ç–æ–≤–∞—Ä –Ω–∞ WB, –∏ —è –ø–æ–∫–∞–∂—É –∫–∞—Ä—Ç–æ—á–∫—É üì¶')
}

/**
 * @param {Context} ctx
 * @returns {Promise<TgMsg>}
 */
export async function sendUnsubAllConfirm(ctx) {
  return await ctx.reply(
    '‚ö†Ô∏è –¢—ã —É–≤–µ—Ä–µ–Ω? –≠—Ç–æ —É–¥–∞–ª–∏—Ç –≤—Å–µ —Ç–≤–æ–∏ –ø–æ–¥–ø–∏—Å–∫–∏!',
    Markup.inlineKeyboard([
      [{ text: '‚úÖ –î–∞, —É–¥–∞–ª–∏—Ç—å –≤—Å–µ', callback_data: 'unsubAllConfirm' }], // TODO
      [{ text: '‚ùå –û—Ç–º–µ–Ω–∞', callback_data: 'cancel' }]
    ])
  )
}

/**
 * Sends confirmation dialog before unsubscribing
 * @param {Context} ctx
 * @param {number} productId
 * @param {number} optionId
 * @returns {Promise<TgMsg>}
 */
export async function sendUnsubConfirm(ctx, productId, optionId) {
  return await ctx.reply(
    '‚ö†Ô∏è –¢—ã —É–≤–µ—Ä–µ–Ω, —á—Ç–æ —Ö–æ—á–µ—à—å –æ—Ç–ø–∏—Å–∞—Ç—å—Å—è –æ—Ç —ç—Ç–æ–≥–æ —Ç–æ–≤–∞—Ä–∞?',
    Markup.inlineKeyboard([
      [{ text: '‚úÖ –î–∞, –æ—Ç–ø–∏—Å–∞—Ç—å—Å—è', callback_data: `unsubConfirm:${productId}:${optionId}` }],
      [{ text: '‚ùå –û—Ç–º–µ–Ω–∞', callback_data: 'cancel' }]
    ])
  )
}

/**
 * @param {Context} ctx
 * @returns {Promise<TgMsg>}
 */
export async function sendProductNotFound(ctx) {
  return await ctx.reply('‚ö†Ô∏è –¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –±–æ–ª—å—à–µ –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω')
}

/**
 * Sends confirmation message after successful subscription
 * @param {Context} ctx
 * @param {ProductCard} product
 * @returns {Promise<TgMsg>}
 */
export async function sendSubscribed(ctx, product) {
  return await ctx.reply(`–ù–∞—á–∏–Ω–∞—é —Å–ª–µ–¥–∏—Ç—å –∑–∞ —Ç–æ–≤–∞—Ä–æ–º ${product.id} üëÄ`)
}

/**
 * @param {Context} ctx
 * @param {UserService} userService
 * @param {WbApi} api
 * @returns {Promise<TgMsg>}
 */
export async function sendSubscriptionsInfo(ctx, userService, api) {
  const userId = ctx.from.id
  const subs = await userService.getSubscriptions(userId)

  if (!subs.length) {
    return await ctx.reply('üì≠ –£ —Ç–µ–±—è –ø–æ–∫–∞ –Ω–µ—Ç –ø–æ–¥–ø–∏—Å–æ–∫')
  }

  const productIds = subs.map(s => s.productId)
  const products = await api.getProducts(productIds)

  const buttons = products.map(p => [
    { text: `${p.id} ‚Äî ${p.name.slice(0, 30)}`, callback_data: `product:${p.id}` }
  ])

  return await ctx.reply('üìã –¢–≤–æ–∏ –ø–æ–¥–ø–∏—Å–∫–∏:', Markup.inlineKeyboard(buttons))
}

/**
 * Sends product card with info and action buttons
 * @param {Context} ctx
 * @param {{
 *   product: ProductCard,
 *   isSubscribed?: boolean,
 *   displaySize?: string|null,
 *   displayPrice?: number|null
 * }} params
 * @returns {Promise<TgMsg>}
 */
export async function sendProductCard(ctx, { product, isSubscribed = false, displaySize = null, displayPrice = null }) {
  const price = displayPrice ? `${displayPrice.toLocaleString()} ‚ÇΩ` : '‚Äî'

  const sizeLine = displaySize ? `\nüìè –†–∞–∑–º–µ—Ä: ${displaySize}` : ''
  const ratingLine = product.rating ? `‚≠êÔ∏è ${product.rating} (${product.feedbacks} –æ—Ç–∑—ã–≤–æ–≤)` : ''

  const caption =
    `üì¶ ${product.name}\n\n` +
    `üí∞ –¶–µ–Ω–∞: ${price}${sizeLine}\n` +
    (ratingLine ? ratingLine + '\n' : '') +
    `üî¢ –ê—Ä—Ç–∏–∫—É–ª: ${product.id}\n` +
    (product.brand ? `üè∑ –ë—Ä–µ–Ω–¥: ${product.brand}\n` : '') +
    (product.supplier ? `üë§ –ü—Ä–æ–¥–∞–≤–µ—Ü: ${product.supplier}\n` : '') +
    `\nüîó [–û—Ç–∫—Ä—ã—Ç—å –Ω–∞ WB](${product.link})`

  const buttons = [
    [
      isSubscribed
        ? { text: '‚ùå –û—Ç–ø–∏—Å–∞—Ç—å—Å—è', callback_data: `unsub:${product.id}:${product.sizes.find(s => s.optionId)?.optionId || 0}` }
        : { text: '‚úÖ –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è', callback_data: `subscribe:${product.id}` }
    ],
    [{ text: 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'menu' }]
  ]

  return await ctx.replyWithPhoto(product.imageURL, {
    caption,
    parse_mode: 'Markdown',
    ...Markup.inlineKeyboard(buttons)
  })
}

/**
 * Sends size selector when product has multiple sizes
 * @param {Context} ctx
 * @param {ProductCard} product
 * @returns {Promise<TgMsg>}
 */
export async function sendSizeSelector(ctx, product) {
  const sizeButtons = product.sizes.map(s => {
    const label = `${s.name} ‚Äî ${s.currentPrice.toLocaleString()} ‚ÇΩ`

    return [{ text: label, callback_data: `subsize:${product.id}:${s.optionId}` }]
  })

  return await ctx.reply(
    '–£ —ç—Ç–æ–≥–æ —Ç–æ–≤–∞—Ä–∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ä–∞–∑–º–µ—Ä–æ–≤. –í—ã–±–µ—Ä–∏ –Ω—É–∂–Ω—ã–π, —á—Ç–æ–±—ã –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è üëá',
    Markup.inlineKeyboard(sizeButtons)
  )
}


/**
 * @param {Context} ctx
 * @returns {Promise<TgMsg>}
 */
export async function sendUnknownText(ctx) {
  return await ctx.reply('üòï –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —è —Ç–µ–±—è –Ω–µ –ø–æ–Ω—è–ª. –í–æ—Ç –º–µ–Ω—é')
}

/**
 * Sends message when subscribed size no longer exists
 * @param {Context} ctx
 * @returns {Promise<TgMsg>}
 */
export async function sendProductOutdated(ctx) {
  return await ctx.reply('‚ö†Ô∏è –ü–æ—Ö–æ–∂–µ, –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Ä–∞–∑–º–µ—Ä –±–æ–ª—å—à–µ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω')
}

/**
 * Sends short "subscription removed" message
 * @param {Context} ctx
 * @param {number} productId
 * @returns {Promise<TgMsg>}
 */
export async function sendUnsubscribed(ctx, productId) {
  return await ctx.reply(`‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ ${productId} —É–¥–∞–ª–µ–Ω–∞`)
}

/**
 * Sends message after removing all subscriptions
 * @param {Context} ctx
 * @returns {Promise<TgMsg>}
 */
export async function sendUnsubAllDone(ctx) {
  return await ctx.reply('‚úÖ –í—Å–µ —Ç–≤–æ–∏ –ø–æ–¥–ø–∏—Å–∫–∏ —É–¥–∞–ª–µ–Ω—ã')
}

/**
 * Sends error message
 * @param {Context} ctx
 * @returns {Promise<TgMsg>}
 */
export async function sendError(ctx) {
  return await ctx.reply('‚ö†Ô∏è –ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫, –ø–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ')
}

